from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import time

from app.states import CreateSchedule
from app.config import ADMINS
from app.database.session import SessionLocal
from app.database.models import Schedule

router = Router()
schedule_manager = None  # ‚Üê –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∏–∑ app.py


def is_admin(message: Message) -> bool:
    return message.from_user.id in ADMINS


@router.message(Command('start'))
async def cmd_start(message: Message):
    if not is_admin(message):
        return
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫.\n–ù–∞–ø–∏—à–∏ /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é. /jobs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.')


@router.message(Command('id'))
async def cmd_id(message: Message):
    await message.answer(f'–í–∞—à Telegram ID: {message.from_user.id}')


@router.message(Command('create'))
async def cmd_create(message: Message, state: FSMContext):
    if not is_admin(message):
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await state.set_state(CreateSchedule.waiting_for_text)


@router.message(CreateSchedule.waiting_for_text)
async def fsm_get_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24—á):')
    await state.set_state(CreateSchedule.waiting_for_time)


@router.message(CreateSchedule.waiting_for_time)
async def fsm_get_time(message: Message, state: FSMContext):
    try:
        parts = message.text.split(':')
        hour = int(parts[0])
        minute = int(parts[1])

        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è')
    
        t = time(hour=hour, minute=minute)

        data = await state.get_data()
        text = data['text']
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        session = SessionLocal()
        task = Schedule(user_id=user_id, text=text, time=t, active=True)
        session.add(task)
        session.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        schedule_manager.add_job(task.id, user_id, text, t)

        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {t.strftime('%H:%M')}')
        await state.clear()
    except Exception:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ß–ß:–ú–ú')


@router.message(Command('jobs'))
async def cmd_jobs(message: Message):
    if not is_admin(message):
        return

    from app.database.session import SessionLocal
    from app.database.models import Schedule

    session = SessionLocal()
    tasks = session.query(Schedule).all()
    session.close()

    if not tasks:
        await message.answer('üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ –±–∞–∑–µ.')
        return

    text = '–ó–∞–¥–∞—á–∏ –≤ –ë–î:\n'
    for task in tasks:
        status = '–ê–∫—Ç–∏–≤–Ω–∞' if task.active else '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        text += f'\nID {task.id} | TIME {task.time.strftime('%H:%M')} | {status}\nTEXT: {task.text[:30]}...\n'

    # —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    text += '\nüïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n'
    jobs = schedule_manager.scheduler.get_jobs()
    if not jobs:
        text += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n'
    else:
        for job in jobs:
            next_run = job.next_run_time.strftime('%H:%M') if job.next_run_time else '‚Äî'
            text += f'‚Ä¢ {job.id} ‚Üí ‚è± {next_run}\n'

    await message.answer(text)
